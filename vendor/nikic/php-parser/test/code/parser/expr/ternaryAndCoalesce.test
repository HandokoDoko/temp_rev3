Ternary operator
-----
<?php

// ternary
$a ? $b : $c;
$a ?: $c;

// precedence
$a ? $b : $c ? $d : $e;
$a ? $b : ($c ? $d : $e);

// null coalesce
$a ?? $b;
$a ?? $b ?? $c;
$a ?? $b ? $c : $d;
$a && $b ?? $c;
-----
array(
    0: Expr_Ternary(
        cond: Expr_Variable(
            name: a
<<<<<<< HEAD
            comments: array(
                0: // ternary
            )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
        )
        if: Expr_Variable(
            name: b
        )
        else: Expr_Variable(
            name: c
        )
<<<<<<< HEAD
        comments: array(
            0: // ternary
        )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
    )
    1: Expr_Ternary(
        cond: Expr_Variable(
            name: a
        )
        if: null
        else: Expr_Variable(
            name: c
        )
    )
    2: Expr_Ternary(
        cond: Expr_Ternary(
            cond: Expr_Variable(
                name: a
<<<<<<< HEAD
                comments: array(
                    0: // precedence
                )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
            )
            if: Expr_Variable(
                name: b
            )
            else: Expr_Variable(
                name: c
            )
<<<<<<< HEAD
            comments: array(
                0: // precedence
            )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
        )
        if: Expr_Variable(
            name: d
        )
        else: Expr_Variable(
            name: e
        )
<<<<<<< HEAD
        comments: array(
            0: // precedence
        )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
    )
    3: Expr_Ternary(
        cond: Expr_Variable(
            name: a
        )
        if: Expr_Variable(
            name: b
        )
        else: Expr_Ternary(
            cond: Expr_Variable(
                name: c
            )
            if: Expr_Variable(
                name: d
            )
            else: Expr_Variable(
                name: e
            )
        )
    )
    4: Expr_BinaryOp_Coalesce(
        left: Expr_Variable(
            name: a
<<<<<<< HEAD
            comments: array(
                0: // null coalesce
            )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
        )
        right: Expr_Variable(
            name: b
        )
<<<<<<< HEAD
        comments: array(
            0: // null coalesce
        )
=======
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
    )
    5: Expr_BinaryOp_Coalesce(
        left: Expr_Variable(
            name: a
        )
        right: Expr_BinaryOp_Coalesce(
            left: Expr_Variable(
                name: b
            )
            right: Expr_Variable(
                name: c
            )
        )
    )
    6: Expr_Ternary(
        cond: Expr_BinaryOp_Coalesce(
            left: Expr_Variable(
                name: a
            )
            right: Expr_Variable(
                name: b
            )
        )
        if: Expr_Variable(
            name: c
        )
        else: Expr_Variable(
            name: d
        )
    )
    7: Expr_BinaryOp_Coalesce(
        left: Expr_BinaryOp_BooleanAnd(
            left: Expr_Variable(
                name: a
            )
            right: Expr_Variable(
                name: b
            )
        )
        right: Expr_Variable(
            name: c
        )
    )
<<<<<<< HEAD
)
=======
)
>>>>>>> c5d8951b77a855b383b3c050dba60a57554eab1e
